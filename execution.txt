== プロジェクトとコマンド

_waf_ スクリプトはソフトウェアプロジェクトのビルドを意味し、単独で使われたときにはあまり役に立たない。 
この章ではWafプロジェクトのセットアップに必要なもの、そして _waf_ スクリプトの使い方について述べる。

=== wafコマンド

WafプロジェクトはWafが使うことができる関数と変数を含むPythonスクリプトである _wscript_ という名前のファイルを使う。
_waf commands_ という名前の特別な関数をコマンドラインで使うことができる。

==== wafコマンドの宣言

wafコマンドは本当にシンプルな関数で他の関数を呼び出すような任意のPythonコードを実行できる。
これらのコマンドは一つのパラメータを入力としてとり、次の例のように、特に値を返す必要はない：

// execution_hello
[source,python]
---------------
#! /usr/bin/env python
# encoding: utf-8

def <1> hello(ctx <2>):
    print('hello world')
---------------

<1> _waf コマンド_ *hello*
<2> スクリプト間でのデータの共有に使われるWafコンテキスト

そして、これがコマンドラインから +waf+ に関数helloを呼び出させる方法だ：

[source,shishell]
---------------
$ waf hello
hello world
'hello' finished successfully (0.001s)
---------------

==== wafコマンドの連鎖

複数のコマンドを同一の _wscript_ ファイルで宣言するとができる：

// execution_ping
[source,python]
---------------
def ping(ctx):
    print(' ping! %d' % id(ctx))

def pong(ctx):
    print(' pong! %d' % id(ctx))
---------------

そして実行を連鎖させることができる：

[source,shishell]
---------------
$ waf ping pong ping ping
 ping! 140704847272272
'ping' finished successfully (0.001s)
 pong! 140704847271376
'pong' finished successfully (0.001s)
 ping! 140704847272336
'ping' finished successfully (0.001s)
 ping! 140704847272528
'ping' finished successfully (0.001s)
---------------

備考: コンテキストパラメータはそれぞれの実行されるコマンドのための新しいオブジェクトだ。また、クラスも異なる: configureのためのConfigureContext、ビルドのためのBuildContext、オプションのためのOptionContext、他のコマンドのためのContext。

==== 複数のスクリプトとフォルダの使用

Wafプロジェクトは最上位のディレクトリ階層に _wscript_ を含まなくてはならないが、中身を複数のサブプロジェクトファイルに分割することができる。
ここでこのコンセプトを小さなプロジェクトで示す：

[source,shishell]
---------------
$ tree
|-- src
|   `-- wscript
`-- wscript
---------------

最上位のディレクトリ階層の _wscript_ は同じコマンドをコンテキストオブジェクトの _recurse_ という名前のメソッドを呼び出すことで、サブプロジェクトの _wscript_ から呼び出す：

// execution_recurse
[source,python]
---------------
def ping(ctx):
	print('→ ping from ' + ctx.path.abspath())
	ctx.recurse('src')
---------------

そしてこれが 'src/wscript' の内容だ

[source,python]
---------------
def ping(ctx):
	print('→ ping from ' + ctx.path.abspath())
---------------

実行すると結果が得られる：

[source,shishell]
---------------
$ cd /tmp/execution_recurse

$ waf ping
→ ping from /tmp/execution_recurse
→ ping from /tmp/execution_recurse/src
'ping' finished successfully (0.002s)

$ cd src

$ waf ping
→ ping from /tmp/execution_recurse/src
'ping' finished successfully (0.001s)
---------------

備考: メソッド _recurse_ 、そして、アトリビュート _path_ はすべてのWafコンテキストクラスから利用できる

=== Wafプロジェクトの定義

==== プロジェクトのconfigure (_configure_ コマンド)

Wafは 'wscript' を含むいかなるファルダからも呼び出すことができるが、通常単一のエントリーポイントを持つことはよい考えだ。
その上、整合的な振舞いを保証するために、同一のインポートの再定義と関数の再定義をすべてのwscriptファイルにも保存する。
次のコンセプトはWafプロジェクトの構造を考える上で助けになる：

. プロジェクトディレクトリ: パッケージ化され他の開発者やエンドユーザーに再配布されるソースファイルを含むディレクトリ
. ビルドディレクトリ: プロジェクトから生成されたファイルを含むディレクトリ(コンフィギュレーションセット、ビルドファイル、ログなど)
. システムファイル: プロジェクトに属さないファイルやフォルダ(オペレーティングシステムファイルなど)

_configure_ という名前の既に定義されたコマンドはこれらのフォルダに関する情報を集めて保存するために使われる。
ここで前のセクションの例を次の最上位層のwscriptファイルで拡張する:

// execution_configure
[source,python]
---------------
top = '.' <1>
out = 'build_directory' <2>

def configure(ctx): <3>
	print('→ configuring the project in ' + ctx.path.abspath())

def ping(ctx):
	print('→ ping from ' + ctx.path.abspath())
	ctx.recurse('src')
---------------

<1> プロジェクトディレクトリを表現する文字列。一般に、topは '.' に設定され、最上位にwscriptを追加できないいくつかのプロリエタリなプロジェクトを除いて、topは '../..' または '/checkout/perforce/project' のような他のフォルダにも設定できる。
<2> ビルドディレクトリを表現する文字列。一般に、ビルドディレクトリが '/tmp/build' のような絶対パスに設定されているようないくつかのプロプリエタリなロジェクトを除いて 'build' に設定される。安全にビルドディレクトリを削除できることが重要で、 '.' や '..' に設定してはならない。
<3> _configure_ 関数は 'configure' コマンドによって呼び出される。

スクリプト 'src/wscript' は変更なし:

[source,python]
---------------
def ping(ctx):
	print('→ ping from ' + ctx.path.abspath())
---------------

実行結果は次のようになる：

////
$ waf ping
→ ping from /tmp/execution_configure
→ ping from /tmp/execution_configure/src
'ping' finished successfully (0.001s)

$ cd src

$ waf ping
→ ping from /tmp/execution_configure/src
'ping' finished successfully (0.001s)

$ cd ..

////

[source,shishell]
---------------
$ cd /tmp/execution_configure <1>
$ tree
|-- src
|   `-- wscript
`-- wscript

$ waf configure <2>
→ configuring the project in /tmp/execution_configure
'configure' finished successfully (0.021s)

$ tree -a
|-- build_directory/ <3>
|   |-- c4che/ <4>
|   |   |-- build.config.py <5>
|   |   `-- _cache.py <6>
|   `-- config.log <7>
|--.lock-wafbuild <8>
|-- src
|   `-- wscript
`-- wscript

$ waf ping
→ ping from /tmp/execution_configure
→ ping from /tmp/execution_configure/src
'ping' finished successfully (0.001s)

$ cd src
$ waf ping <9>
→ ping from /tmp/execution_configure
→ ping from /tmp/execution_configure/src
'ping' finished successfully (0.001s)
---------------

<1> プロジェクトのconfigureを行うため、最上位のプロジェクトファイルを含むディレクトリに移動
<2> _waf configure_ を呼び出すことで実行される
<3> ビルドディレクトリが作られた
<4> コンフィギュレーションデータは 'c4che/' に保存される
<5> コマンドラインオプションと使われる環境変数は 'build.config.py' に保存される
<6> ユーザーのコンフィギュレーションセットは '_cache.py' に保存される
<7> コンフィギュレーションログ(コンフィギュレーション中に生成された出力の複製)
<8> 関連のあるプロジェクトファイルとビルドディレクトリを指し示す隠しファイル
<9> サブフォルダから _waf_ を呼出すとconfigureに使用したのと同一のwscriptファイルからコマンドを実行する

備考: _waf configure_ は常にwscriptファイルを含むディレクトリから呼び出される

==== 生成されたファイルの削除(_distclean_ コマンド)

コマンド _distclean_ はビルドディレクトリとコンフィギュレーションで生成されたロックファイルを削除するために提供されている。
前のセクションでの例：

[source,shishell]
---------------
$ waf configure
→ configuring the project in /tmp/execution_configure
'configure' finished successfully (0.001s)

$ tree -a
|-- build_directory/
|   |-- c4che/
|   |   |-- build.config.py
|   |   `-- _cache.py
|   `-- config.log
|--.lock-wafbuild
`-- wscript

$ waf distclean <1>
'distclean' finished successfully (0.001s)

$ tree <2>
|-- src
|   `-- wscript
`-- wscript
---------------

<1> _distclean_ コマンドの定義は暗黙的(wscriptファイルで宣言されない)
<2> ツリーは元の状態に戻される: ビルドディレクトリもロックファイルもない

_distclean_ の振舞はごく一般的で、対応する関数はwscriptで定義される必要はない。
振舞を変更するには次の例を参照：

[source,python]
---------------
top = '.'
out = 'build_directory'

def configure(ctx):
	print('→ configuring the project')

def distclean(ctx):
	print(' Not cleaning anything!')
---------------

実行する:

[source,shishell]
---------------
$ waf distclean
 Not cleaning anything!
'distclean' finished successfully (0.000s)
---------------

==== プロジェクトソースのパッケージ化(_dist_ コマンド)

_dist_ コマンドはプロジェクトのアーカイブを生成するために提供されている。
前掲のスクリプトを使って：

// execution_dist

[source,python]
---------------
top = '.'
out = 'build_directory'

def configure(ctx):
	print('→ configuring the project in ' + ctx.path.abspath())
---------------

_dist_ コマンドを実行:

[source,shishell]
---------------
$ cd /tmp/execution_dist

$ waf configure
→ configuring the project in /tmp/execution_dist
'configure' finished successfully (0.005s)

$ waf dist
New archive created: noname-1.0.tar.bz2 (sha='a4543bb438456b56d6c89a6695f17e6cb69061f5')
'dist' finished successfully (0.035s)
---------------

デフォルトでは, プロジェクト名とバージョンはそれぞれ 'noname' と '1.0' にセットされる。
これらを変更するには、トップレベルのプロジェクトファイルで2つの変数を追加的に与える必要がある：

[source,python]
---------------
APPNAME = 'webe'
VERSION = '2.0'

top = '.'
out = 'build_directory'

def configure(ctx):
	print('→ configuring the project in ' + ctx.path.abspath())
---------------

プロジェクトのconfigureは一度行われたため、もう一度configureを行う必要はない：

[source,shishell]
---------------
$ waf dist
New archive created: webe-2.0.tar.bz2 (sha='7ccc338e2ff99b46d97e5301793824e5941dd2be')
'dist' finished successfully (0.006s)
---------------

スクリプトで 'dist' 関数を追加することでアーカイブを変更するために他にもパラメータを与えることができる；

[source,python]
---------------
def dist(ctx):
	ctx.base_name = 'foo_2.0' <1>
	ctx.algo      = 'zip' <2>
	ctx.excl      = ' **/.waf-1* **/*~ **/*.pyc **/*.swp **/.lock-w*' <3>
	ctx.files     = ctx.path.ant_glob('**/wscript') <4>
---------------

<1> アーカイブ名は 'APPNAME' と 'VERSION' から計算されるのではなく直接与えられる。
<2> デフォルトの圧縮フォーマットは 'tar.bz2' 。他の有効なフォーマットは 'zip' と 'tar.gz' だ
<3> ファイルを探すために使われる 'ctx.path.ant_glob()' に与えるための除外パターン
<4> アーカイブに追加するファイルはWafのノードオブジェクトとして与えることができる(そのため 'excl' は無視される)

==== コマンドラインオプションの定義(_options_ コマンド)

Wafスクリプトはさまざまなデフォルトのコマンドラインオプションを提供し、 +waf --help+ を実行することで使い方を確認することができる:

[source,shishell]
---------------
$ waf --help
waf [command] [options]

Main commands (example: ./waf build -j4)
  build    : executes the build
  clean    : cleans the project
  configure: configures the project
  dist     : makes a tarball for redistributing the sources
  distcheck: checks if the project compiles (tarball from 'dist')
  distclean: removes the build directory
  install  : installs the targets on the system
  list     : lists the targets to execute
  step     : executes tasks in a step-by-step fashion, for debugging
  uninstall: removes the targets installed

Options:
  --version             show program's version number and exit
  -h, --help            show this help message and exit
  -j JOBS, --jobs=JOBS  amount of parallel jobs (2)
  -k, --keep            keep running happily even if errors are found
  -v, --verbose         verbosity level -v -vv or -vvv [default: 0]
  --nocache             ignore the WAFCACHE (if set)
  --zones=ZONES         debugging zones (task_gen, deps, tasks, etc)

  configure options:
    -o OUT, --out=OUT   build dir for the project
    -t TOP, --top=TOP   src dir for the project
    --prefix=PREFIX     installation prefix [default: '/usr/local/']
    --download          try to download the tools if missing

  build and install options:
    -p, --progress      -p: progress bar; -pp: ide output
    --targets=TARGETS   task generators, e.g. "target1,target2"

  step options:
    --files=FILES       files to process, by regexp, e.g. "*/main.c,*/test/main.o"

  install/uninstall options:
    --destdir=DESTDIR   installation root [default: '']
    -f, --force         force file installation
---------------

コマンドラインオプションへのアクセスはどのコマンドからでも可能だ。
ここに値 _prefix_ にアクセスする方法を示す：

[source,python]
---------------
top = '.'
out = 'build_directory'

def configure(ctx):
	print('→ prefix is ' + ctx.options.prefix)
---------------

実行すると、次の結果が観測されるだろう：

[source,shishell]
---------------
$ waf configure
→ prefix is /usr/local/
'configure' finished successfully (0.001s)
---------------

プロジェクトのコマンドラインオプションを定義するには、特別なコマンド名 _options_ をユーザースクリプトで定義する。
このコマンドは他のコマンドが実行される前に一度呼び出される。

[source,python]
---------------
top = '.'
out = 'build_directory'

def options(ctx):
	ctx.add_option('--foo', action='store', default=False, help='Silly test')

def configure(ctx):
	print('→ the value of foo is %r' % ctx.options.foo)
---------------

実行すると、次の結果が観測されるだろう：

[source,shishell]
---------------
$ waf configure --foo=test
→ the value of foo is 'test'
'configure' finished successfully (0.001s)
---------------

オプションのためのコマンドコンテキストはoptparseの機能へアクセスするためのショートカットだ。
optparseの詳細についてはhttp://docs.python.org/library/optparse.html[Python documentation]を参照。


=== _build_ コマンド

==== Building targets (_build_ コマンド)

'build' コマンドはターゲットのビルドに使われる。 
ここで新しいプロジェクトを '/tmp/execution_build/' に作り、空のファイル +foo.txt+ を作って別のファイル +bar.txt+ にコピーするためのスクリプトを追加する：

// execution_build
[source,python]
---------------
top = '.'
out = 'build_directory'

def configure(ctx):
    pass

def build(ctx):
    ctx(rule='touch ${TGT}', target='foo.txt')
    ctx(rule='cp ${SRC} ${TGT}', source='foo.txt', target='bar.txt')
---------------

_waf build_ を直接呼ぶとエラーになる：

[source,shishell]
---------------
$ cd /tmp/execution_build/

$ waf build
The project was not configured: run "waf configure" first!
---------------

ビルドはソースファイルを探す場所および作成されたファイルをアウトプットする場所を知るためにconfigureされたフォルダを必要とする。
再びトライしよう：

[source,shishell]
---------------
$ waf configure build
'configure' finished successfully (0.007s)
Waf: Entering directory `/tmp/execution_build/build_directory'
[1/2] foo.txt:  -> build_directory/foo.txt <1>
[2/2] bar.txt: build_directory/foo.txt -> build_directory/bar.txt
Waf: Leaving directory `/tmp/examples/execution_build/build_directory'
'build' finished successfully (0.041s)

$ tree -a
|-- build_directory/
|   |-- bar.txt <2>
|   |-- c4che/
|   |   |-- build.config.py
|   |   `-- _cache.py
|   |-- foo.txt
|   |-- config.log
|   `-- .wafpickle <3>
|--.lock-wafbuild
`-- wscript

$ waf build
Waf: Entering directory `/tmp/execution_build/build_directory'
Waf: Leaving directory `/tmp/execution_build/build_directory'
'build' finished successfully (0.008s) <4>
---------------

<1> +bar.txt+ は +foo.txt+ の後に作成されなくてはならないことをビルドから演繹される
<2> ターゲットはビルドディレクトリに作成される
<3> ピックル化されたファイルはターゲットに関する情報を格納するために使われる
<4> ターゲットが最新の状態にあるため、もう一度作成される必要はない

コマンド _waf build_ は通常非常に頻繁に実行されるため、暗黙に呼び出すショートカットが提供されている：

[source,shishell]
---------------
$ waf
Waf: Entering directory `/tmp/execution_build/build_directory'
Waf: Leaving directory `/tmp/execution_build/build_directory'
---------------

==== ターゲットのクリーン (_clean_ コマンド)

_clean_ コマンドはファイルとビルドで生成されたターゲットに関する情報を削除するために使われる。
wscriptの関数 _build_ を使うのでwscriptに _clean_ という名前の関数を追加する必要はない。

クリーンの後、最新の状態であったとしてもターゲットはもう一度作られる。

[source,shishell]
---------------
$ waf clean build -v
'clean' finished successfully (0.003s)
Waf: Entering directory `/tmp/execution_build/build_directory' <1>
[1/2] foo.txt:  -> build_directory/foo.txt <2>
14:58:34 runner 'touch foo.txt' <3>
[2/2] bar.txt: build_directory/foo.txt -> build_directory/bar.txt
14:58:34 runner 'cp foo.txt bar.txt'
Waf: Leaving directory `/tmp/execution_build/build_directory'
'build' finished successfully (0.040s)
---------------

<1> デファルトですべてのコマンドはビルドディレクトリから実行される
<2> +foo.txt+ に関する情報が失われたのでリビルドされる
<3> _-v_ フラグを使うと、実行されるコマンドラインは表示される

==== さらなるbuildコマンド

次のすべてのコマンドはwscriptファイル中の同一の関数 _build_ を使う：

. +build:+ ソースコードを処理してオブジェクトファイルを生成する
. +clean:+ buildで生成されたオブジェクトファイルを削除する(distcleanとは異なり、configurationは削除しない)
. +install:+ 生成されたすべてのオブジェクトファイルをチェックし、システムにコピーする(プログラム、ライブラリ、データファイルなど)
. +uninstall:+ ビルドディレクトリ中のファイルには触れずにシステムからオブジェクトファイルを削除し, インストールを元に戻す
. +list:+ ビルドセクション中のタスクジェネレータを列挙(waf --targets=nameで使うため)
. +step:+ デバッグのために特定のファイルを強制的にリビルドする

アトリビュート'cmd' は実行されるコマンドの名前を保持する：

// execution_cmd
[source,python]
---------------
top = '.'
out = 'build_directory'

def configure(ctx):
	print(ctx.cmd)

def build(ctx):
	if ctx.cmd == 'clean':
		print('cleaning!')
	else:
		print(ctx.cmd)
---------------

実行結果の出力は次のようになる：

[source,shishell]
---------------
$ waf configure clean build
Setting top to : /tmp/execution_cmd
Setting out to : /tmp/execution_cmd/build_directory
configure
'configure' finished successfully (0.002s)
cleaning!
'clean' finished successfully (0.002s)
Waf: Entering directory `/tmp/execution_cmd/build_directory'
build
Waf: Leaving directory `/tmp/execution_cmd/build_directory'
'build' finished successfully (0.001s)
---------------

buildコマンドの利用方法については次章で詳しく述べる。

