== 開発バージョンの使用

Wafの開発フローに関するいくつかのノート。

=== 実行のトレース

==== ロギング

スタックトレースやメッセージに情報を追加する一般的なフラグは '-v' (verbosity)で、ビルド中に実行されるコマンドラインの表示に使われる：

[source,shishell]
---------------
$ waf -v
---------------

すべてのトレース(バグレポートに便利)を表示するには、次のフラグを使う：

[source,shishell]
---------------
$ waf -vvv
---------------

'zones' フラグで簡単にデバッグ情報をフィルターできる:

[source,shishell]
---------------
$ waf --zones=action
---------------

トレースするゾーンはカンマ区切でなくてはならない、例えば：

[source,shishell]
---------------
$ waf --zones=action,envhash,task_gen
---------------

Wafの 'Logs' モジュールはPythonのloggingモジュールを置換する。
ソースコードでは、トレースは 'debug' 関数を使うことで与えられ、次のように"zone: message"のフォーマットに従わなくてはならない：

[source,python]
---------------
Logs.debug("task: executing %r - it was never run before or its class changed" % self)
---------------

Wafでは次のゾーンが使われる：

.デバッグゾーン
[options="header",cols='1,5']
|=================
|ゾーン    | 説明
|runner  | 実行されるコマンドライン(デバッグゾーンなしで-vが与えられると有効になる)
|deps    | 暗黙の依存関係の検出(タスクスキャナ)
|task_gen| (タスクジェネレータからの)タスク生成とタスクジェネレータメソッドの実行
|action  | ターゲットのビルドを実行するための関数
|env     | 環境オブジェクト
|envhash | 環境オブジェクトのハッシュ - 変化したものを確認するのを助ける
|build   | ファイルシステムへのアクセスなどのビルドコンテキストのオペレーション
|preproc | プリプロセッサの実行
|group   | グループとタスクジェネレータ
|=================

警告: デバッグ情報はコマンドラインが解析された後にのみ表示することができる。例えば、コマンドラインオプション 'opt.load()' もしくはグローバルな初期化関数 'init.tool()' によってWafツールが存在する場合にはデバッグ情報は表示されない。

==== ビルドの視覚化

_parallel_debug_ という名前のWafツールはWafモジュールにコードをインジェクションするために使われ、詳細な実行トレースを取得する。
このモジュールはフォルダ +waflib/extras+ で提供され、使用前にプロジェクトでインポートされなくてはならない：

[source,python]
---------------
def options(ctx):
	ctx.load('parallel_debug', tooldir='.')

def configure(ctx):
	ctx.load('parallel_debug', tooldir='.')

def build(ctx):
	bld(rule='touch ${TGT}', target='foo')
---------------

実行するとファイル +pdebug.svg+ にビルド中に実行されたタスクのダイアグラムを生成する：

image::pdebug{PIC}["並列実行ダイアグラム"{backend@docbook:,width=500:},align="center"]

詳細はスペース区切の値としてファイル +pdebug.dat+ に生成される。
このファイルは他のダイアグラムを得るためにGnuplotなどの他のアプリケーションによって処理することができる：

[source,shishell]
---------------
#! /usr/bin/env gnuplot
set terminal png
set output "output.png"
set ylabel "Amount of active threads"
set xlabel "Time in seconds"
set title "Active threads on a parallel build (waf -j5)"
unset label
set yrange [-0.1:5.2]
set ytic 1
plot 'pdebug.dat' using 3:7 with lines title "" lt 2
---------------

image::dev{PIC}["ビルド中のスレッドアクティビティ"{backend@docbook:,width=410:},align="center"]

データファイルフォーマットは次のようになる：

.pdebugファイルフォーマット
[options="header", cols="1,2,6"]
|=================
|カラム | 型 | 説明
|1 |int| 開始もしくは終了したタスクをもつスレッドの識別子
|2 |int| 処理されるタスクの識別子
|3 |float| イベント時刻
|4 |string| 処理されるタスクの型
|5 |int| 処理されるタスク数
|6 |int| タスクコンシューマによって処理されるのを待機しているタスク数
|7 |int| アクティブなスレッド数
|=================


=== プロファイリング

==== プロジェクトのベンチマーク

スクリプト +utils/genbench.py+ は巨大なCライクなプロジェクトファイルを作るベースとなる。
一般的な使い方は次のようになる：

[source,shishell]
---------------
$ utils/genbench.py /tmp/build 50 100 15 5
$ cd /tmp/build
$ waf configure
$ waf -p -j2
---------------

作成されたC++プロジェクトは100のクラスからそれぞれ50のライブラリを生成し、それぞれのソースファイルは同一のライブラリを指し示す15のインクルードヘッダと5つのランダムに選ばれた他のヘッダを指し示すヘッダをもつ。

コンパイル時間は実際のコンパイルを無効にすることで簡単に捨てることができる。
例：

[source,python]
---------------
def build(bld):
	from waflib import Task
	def touch_func(task):
		for x in task.outputs:
			x.write('')
	for x in Task.TaskBase.classes.keys():
		cls = Task.TaskBase.classes[x]
		cls.func = touch_func
		cls.color = 'CYAN'
---------------

==== トレースのプロファイリング

プロファイリングの情報はcProfileモジュールを呼出し、特定のコードを埋め込むことで取得される。
プロファイリングのためのもっとも興味深いメソッドは 'waflib.Build.BuildContext.compile' だ。
関数呼出しの数は通常ボトルネックとなり、減らすことで大きなスピードアップが得られる。
これはコンパイルメソッドでの例だ：

[source,python]
---------------
from waflib.Build import BuildContext
def ncomp(self):
	import cProfile, pstats
	cProfile.runctx('self.orig_compile()', {}, {'self': self}, 'profi.txt')
	p = pstats.Stats('profi.txt')
	p.sort_stats('time').print_stats(45)

BuildContext.orig_compile = BuildContext.compile
BuildContext.compile = ncomp
---------------

これは前のセクションで説明したビルドのベンチマークのアウトプットだ：

[source,shishell]
---------------
Fri Jul 23 15:11:15 2010    profi.txt

         1114979 function calls (1099879 primitive calls) in 5.768 CPU seconds

   Ordered by: internal time
   List reduced from 139 to 45 due to restriction 45

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
   109500    0.523    0.000    1.775    0.000 /comp/waf/waflib/Node.py:615(get_bld_sig)
     5000    0.381    0.000    1.631    0.000 /comp/waf/waflib/Task.py:475(compute_sig_implicit_deps)
   154550    0.286    0.000    0.286    0.000 {method 'update' of '_hashlib.HASH' objects}
   265350    0.232    0.000    0.232    0.000 {id}
40201/25101    0.228    0.000    0.228    0.000 /comp/waf/waflib/Node.py:319(abspath)
    10000    0.223    0.000    0.223    0.000 {open}
    20000    0.197    0.000    0.197    0.000 {method 'read' of 'file' objects}
    15000    0.193    0.000    0.349    0.000 /comp/waf/waflib/Task.py:270(uid)
    10000    0.189    0.000    0.850    0.000 /comp/waf/waflib/Utils.py:96(h_file)
---------------

既知のいくつかのホットスポットがライブラリに存在する：

. cPickleモジュールによって実装された永続化(シリアライズのためのキャッシュファイルは数メガバイト消費することがある)
. Environmentインスタンスからのコンフィギュレーションデータへのアクセス
. 一般的な暗黙の依存関係の計算

==== 最適化のTips

wafのソースコードはすでにさまざまな方法で最適化が施されている。
実際、プロジェクトでは追加的な想定が使われておりビルドスクリプトのあるメソッドやパラメータは置換される。
例えば、Windowsで実行されるならば、変数 _framework_ と _rpath_ は削除される：

[source,python]
---------------
from waflib.Tools.ccroot import USELIB_VARS
USELIB_VARS['cprogram'] = USELIB_VARS['cxxprogram'] = \
	set(['LIB', 'STLIB', 'LIBPATH', 'STLIBPATH', 'LINKFLAGS', 'LINKDEPS'])
---------------

=== Wafプログラミング

==== 開発用のWafディレクトリのセットアップ

Wafは http://code.google.com/p/waf/source[Google code] でホスティングされており、ソースコントロールにSubversionを使用している。
開発バージョンのコピーを得るには、次を使用：

[source,shishell]
---------------
$ svn checkout http://waf.googlecode.com/svn/trunk/ waf-read-only
$ cd waf-read-only
$ ./waf-light --make-waf
---------------

Wafを毎回生成するのを避けるために、環境変数 *WAFDIR* は _waflib_ を含むディレクトリを指し示すべきだ：

[source,shishell]
---------------
$ export WAFDIR=/path/to/directory/
---------------

==== 特定のガイドライン

Wafはpythonで書かれているが、ソースコードには他にも追加で制限が適用されている：

. インデントはタブのみで1行の最大の文字数は200
. 開発コードはToolsディレクトリ以下のデコレータは例外だが、Python2.3との互換性を保っている。特にWafのバイナリはPython2.3で生成できる
. Wafのコアを小さく、言語から独立に保つために _waflib_ モジュールは _Tools_ モジュールから隔離されなくてはならない
. APIの互換性はマイナーバージョンのサイクルでメンテナンスされる(1.5.0から1.5.n)

備考: コードが多くなると常にバグが増える。可能ならばいつでも不要なコードは削除されなくてはならないし、存在するコードベースはシンプルであるべきだ。

